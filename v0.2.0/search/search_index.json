{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MuPDF Extractor","text":"<p>We provide a PDF line extractor built on top of PyMuPdf.</p> <p>This extractor is the fastest but may not be as portable as that PdfMinerExtractor. However, it should also be relatively easy to install on a wide range of architectures, Linux, OS X and Windows.</p> <p>License</p> <p>Beware, PyMuPdf is distributed under the AGPL license, therefore so is this component, and any model depending on this component must be too.</p>"},{"location":"#edspdf_mupdf.MuPdfExtractor--installation","title":"Installation","text":"<p>For the licensing reason mentioned above, the <code>mupdf</code> component is distributed in a separate package <code>edspdf-mupdf</code>. To install it, use your favorite Python package manager :</p> <pre><code>poetry add edspdf-mupdf\n# or\npip install edspdf-mupdf\n</code></pre>"},{"location":"#edspdf_mupdf.MuPdfExtractor--example","title":"Example","text":"API-basedConfiguration-based <pre><code>pipeline.add_pipe(\n    \"mupdf-extractor\",\n    config=dict(\n        extract_style=False,\n    ),\n)\n</code></pre> <pre><code>[components.mupdf-extractor]\n@factory = \"mupdf-extractor\"\nextract_style = false\n</code></pre> <p>and use it as follows:</p> <pre><code>from pathlib import Path\n\n# Apply on a new document\npipeline(Path(\"path/to/your/pdf/document\").read_bytes())\n</code></pre>"},{"location":"#edspdf_mupdf.MuPdfExtractor--parameters","title":"Parameters","text":"PARAMETER DESCRIPTION <code>pipeline</code> <p>The pipeline object</p> <p> TYPE: <code>Pipeline</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name of the component</p> <p> TYPE: <code>str</code> DEFAULT: <code>'mupdf_extractor'</code> </p> <code>extract_style</code> <p>Extract style</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>raise_on_error</code> <p>Whether to raise an error when parsing a corrupted PDF (defaults to False)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>use_cropbox</code> <p>Whether to use the cropbox instead of the mediabox (defaults to True)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>render_pages</code> <p>Whether to extract the rendered page as a numpy array in the <code>page.image</code> attribute (defaults to False)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>render_dpi</code> <p>DPI to use when rendering the page (defaults to 200)</p> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>sort_mode</code> <p>Box sorting mode</p> <ul> <li>\"blocks\": sort while keeping blocks of boxes intaxct. Use this mode if you trust the PDF to have been generated by a tool that produces blocks of text.</li> <li>\"lines\": sort by lines, without preserving the order of lines inside blocks</li> <li>\"none\": do not sort boxes</li> </ul> <p> TYPE: <code>Literal['blocks', 'lines', 'none']</code> DEFAULT: <code>'none'</code> </p>"}]}